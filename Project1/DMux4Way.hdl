// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/DMux4Way.hdl
/**
 * 4-way demultiplexor:
 * [a, b, c, d] = [in, 0, 0, 0] if sel = 00
 *                [0, in, 0, 0] if sel = 01
 *                [0, 0, in, 0] if sel = 10
 *                [0, 0, 0, in] if sel = 11
 */
CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    /*
    One way:
    a = in AND Not(sel1) AND Not(sel0)
    b = in AND Not(sel1) AND sel0
    c = in AND sel1 AND Not(sel0)
    d = in AND sel1 AND sel0

    Not(in=sel[0], out=NotSel0);
    Not(in=sel[1], out=NotSel1);
    ...
    This will use 12 parts.

    Another method with less parts:
    Remmeber: Dmux(in, sel, a, b) = [in, 0] if sel=0, [0, in] if sel=1
    So, the output is:
      Not(sel1) AND DMux(in, sel0, a, b)
      sel1 AND DMux(in, sel0, c, d)
    */

    DMux(in=in, sel=sel[0], a=initA, b=initB);
    DMux(in=in, sel=sel[0], a=initC, b=initD);

    Not(in=sel[1], out=notSel1);
    And(a=notSel1, b=initA, out=a);
    And(a=notSel1, b=initB, out=b);
    And(a=sel[1], b=initC, out=c);
    And(a=sel[1], b=initD, out=d);
}